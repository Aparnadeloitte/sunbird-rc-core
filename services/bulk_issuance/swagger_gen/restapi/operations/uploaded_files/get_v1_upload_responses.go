// Code generated by go-swagger; DO NOT EDIT.

package uploaded_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetV1UploadOKCode is the HTTP code returned for type GetV1UploadOK
const GetV1UploadOKCode int = 200

/*GetV1UploadOK OK

swagger:response getV1UploadOK
*/
type GetV1UploadOK struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetV1UploadOK creates GetV1UploadOK with default headers values
func NewGetV1UploadOK() *GetV1UploadOK {

	return &GetV1UploadOK{}
}

// WithPayload adds the payload to the get v1 upload o k response
func (o *GetV1UploadOK) WithPayload(payload interface{}) *GetV1UploadOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 upload o k response
func (o *GetV1UploadOK) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1UploadOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetV1UploadNotFoundCode is the HTTP code returned for type GetV1UploadNotFound
const GetV1UploadNotFoundCode int = 404

/*GetV1UploadNotFound Not found

swagger:response getV1UploadNotFound
*/
type GetV1UploadNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetV1UploadNotFound creates GetV1UploadNotFound with default headers values
func NewGetV1UploadNotFound() *GetV1UploadNotFound {

	return &GetV1UploadNotFound{}
}

// WithPayload adds the payload to the get v1 upload not found response
func (o *GetV1UploadNotFound) WithPayload(payload string) *GetV1UploadNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 upload not found response
func (o *GetV1UploadNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1UploadNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
