// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetHeathHandlerFunc turns a function with the right signature into a get heath handler
type GetHeathHandlerFunc func(GetHeathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetHeathHandlerFunc) Handle(params GetHeathParams) middleware.Responder {
	return fn(params)
}

// GetHeathHandler interface for that can handle valid get heath params
type GetHeathHandler interface {
	Handle(GetHeathParams) middleware.Responder
}

// NewGetHeath creates a new http.Handler for the get heath operation
func NewGetHeath(ctx *middleware.Context, handler GetHeathHandler) *GetHeath {
	return &GetHeath{Context: ctx, Handler: handler}
}

/*
	GetHeath swagger:route GET /heath health getHeath

# Get the health status

API to get the notification health status
*/
type GetHeath struct {
	Context *middleware.Context
	Handler GetHeathHandler
}

func (o *GetHeath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetHeathParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
