// Code generated by go-swagger; DO NOT EDIT.

package pull_certificates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostV1DigilockerPullURIRequestHandlerFunc turns a function with the right signature into a post v1 digilocker pull URI request handler
type PostV1DigilockerPullURIRequestHandlerFunc func(PostV1DigilockerPullURIRequestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1DigilockerPullURIRequestHandlerFunc) Handle(params PostV1DigilockerPullURIRequestParams) middleware.Responder {
	return fn(params)
}

// PostV1DigilockerPullURIRequestHandler interface for that can handle valid post v1 digilocker pull URI request params
type PostV1DigilockerPullURIRequestHandler interface {
	Handle(PostV1DigilockerPullURIRequestParams) middleware.Responder
}

// NewPostV1DigilockerPullURIRequest creates a new http.Handler for the post v1 digilocker pull URI request operation
func NewPostV1DigilockerPullURIRequest(ctx *middleware.Context, handler PostV1DigilockerPullURIRequestHandler) *PostV1DigilockerPullURIRequest {
	return &PostV1DigilockerPullURIRequest{Context: ctx, Handler: handler}
}

/*
	PostV1DigilockerPullURIRequest swagger:route POST /v1/digilocker/pullUriRequest pull certificates postV1DigilockerPullUriRequest

# Pull certificates in digilocker

API to pull the credentials in digilocker
*/
type PostV1DigilockerPullURIRequest struct {
	Context *middleware.Context
	Handler PostV1DigilockerPullURIRequestHandler
}

func (o *PostV1DigilockerPullURIRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostV1DigilockerPullURIRequestParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
