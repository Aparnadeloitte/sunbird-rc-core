// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PullURIRequest pull URI request
//
// swagger:model PullURIRequest
type PullURIRequest struct {

	// doc details
	DocDetails *PullURIRequestDocDetails `json:"DocDetails,omitempty"`

	// format
	Format string `json:"Format,omitempty"`

	// ns2
	Ns2 string `json:"Ns2,omitempty"`

	// org Id
	OrgID string `json:"OrgId,omitempty"`

	// text
	Text string `json:"Text,omitempty"`

	// ts
	Ts string `json:"Ts,omitempty"`

	// txn
	Txn string `json:"Txn,omitempty"`

	// ver
	Ver string `json:"Ver,omitempty"`

	// XML name
	XMLName string `json:"XMLName,omitempty"`
}

// Validate validates this pull URI request
func (m *PullURIRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullURIRequest) validateDocDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DocDetails) { // not required
		return nil
	}

	if m.DocDetails != nil {
		if err := m.DocDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DocDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DocDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pull URI request based on the context it is used
func (m *PullURIRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDocDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullURIRequest) contextValidateDocDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.DocDetails != nil {
		if err := m.DocDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DocDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DocDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullURIRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullURIRequest) UnmarshalBinary(b []byte) error {
	var res PullURIRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PullURIRequestDocDetails pull URI request doc details
//
// swagger:model PullURIRequestDocDetails
type PullURIRequestDocDetails struct {

	// certificate Id
	CertificateID string `json:"CertificateId,omitempty"`

	// d o b
	DOB string `json:"DOB,omitempty"`

	// digi locker Id
	DigiLockerID string `json:"DigiLockerId,omitempty"`

	// doc type
	DocType string `json:"DocType,omitempty"`

	// full name
	FullName string `json:"FullName,omitempty"`

	// mobile
	Mobile string `json:"Mobile,omitempty"`

	// photo
	Photo string `json:"Photo,omitempty"`

	// text
	Text string `json:"Text,omitempty"`

	// tracking Id
	TrackingID string `json:"TrackingId,omitempty"`

	// u d f1
	UDF1 string `json:"UDF1,omitempty"`

	// u d f2
	UDF2 string `json:"UDF2,omitempty"`

	// u d f3
	UDF3 string `json:"UDF3,omitempty"`

	// u d fn
	UDFn string `json:"UDFn,omitempty"`

	// UID
	UID string `json:"UID,omitempty"`
}

// Validate validates this pull URI request doc details
func (m *PullURIRequestDocDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pull URI request doc details based on context it is used
func (m *PullURIRequestDocDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PullURIRequestDocDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullURIRequestDocDetails) UnmarshalBinary(b []byte) error {
	var res PullURIRequestDocDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
