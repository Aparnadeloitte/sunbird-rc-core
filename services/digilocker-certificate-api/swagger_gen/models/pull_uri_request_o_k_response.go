// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PullURIRequestOKResponse pull URI request o k response
//
// swagger:model PullURIRequestOKResponse
type PullURIRequestOKResponse struct {

	// doc details
	DocDetails *PullURIRequestOKResponseDocDetails `xml:"DocDetails,omitempty"`

	// ns2
	Ns2 string `xml:"Ns2,omitempty"`

	// response status
	ResponseStatus *PullURIRequestOKResponseResponseStatus `xml:"ResponseStatus,omitempty"`

	// text
	Text string `xml:"Text,omitempty"`

	// XML name
	XMLName string `xml:"XMLName,omitempty"`
}

// Validate validates this pull URI request o k response
func (m *PullURIRequestOKResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullURIRequestOKResponse) validateDocDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DocDetails) { // not required
		return nil
	}

	if m.DocDetails != nil {
		if err := m.DocDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DocDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DocDetails")
			}
			return err
		}
	}

	return nil
}

func (m *PullURIRequestOKResponse) validateResponseStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseStatus) { // not required
		return nil
	}

	if m.ResponseStatus != nil {
		if err := m.ResponseStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pull URI request o k response based on the context it is used
func (m *PullURIRequestOKResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDocDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PullURIRequestOKResponse) contextValidateDocDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.DocDetails != nil {
		if err := m.DocDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DocDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DocDetails")
			}
			return err
		}
	}

	return nil
}

func (m *PullURIRequestOKResponse) contextValidateResponseStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ResponseStatus != nil {
		if err := m.ResponseStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PullURIRequestOKResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullURIRequestOKResponse) UnmarshalBinary(b []byte) error {
	var res PullURIRequestOKResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PullURIRequestOKResponseDocDetails pull URI request o k response doc details
//
// swagger:model PullURIRequestOKResponseDocDetails
type PullURIRequestOKResponseDocDetails struct {

	// certificate Id
	CertificateID string `xml:"CertificateId,omitempty"`

	// d o b
	DOB string `xml:"DOB,omitempty"`

	// data content
	DataContent string `xml:"DataContent,omitempty"`

	// digi locker Id
	DigiLockerID string `xml:"DigiLockerId,omitempty"`

	// doc content
	DocContent string `xml:"DocContent,omitempty"`

	// doc type
	DocType string `xml:"DocType,omitempty"`

	// full name
	FullName string `xml:"FullName,omitempty"`

	// mobile
	Mobile string `xml:"Mobile,omitempty"`

	// text
	Text string `xml:"Text,omitempty"`

	// u d f1
	UDF1 string `xml:"UDF1,omitempty"`

	// UID
	UID string `xml:"UID,omitempty"`

	// URI
	URI string `xml:"URI,omitempty"`
}

// Validate validates this pull URI request o k response doc details
func (m *PullURIRequestOKResponseDocDetails) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pull URI request o k response doc details based on context it is used
func (m *PullURIRequestOKResponseDocDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PullURIRequestOKResponseDocDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullURIRequestOKResponseDocDetails) UnmarshalBinary(b []byte) error {
	var res PullURIRequestOKResponseDocDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PullURIRequestOKResponseResponseStatus pull URI request o k response response status
//
// swagger:model PullURIRequestOKResponseResponseStatus
type PullURIRequestOKResponseResponseStatus struct {

	// status
	Status string `xml:"Status,omitempty"`

	// text
	Text string `xml:"Text,omitempty"`

	// ts
	Ts string `xml:"Ts,omitempty"`

	// txn
	Txn string `xml:"Txn,omitempty"`
}

// Validate validates this pull URI request o k response response status
func (m *PullURIRequestOKResponseResponseStatus) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this pull URI request o k response response status based on context it is used
func (m *PullURIRequestOKResponseResponseStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PullURIRequestOKResponseResponseStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PullURIRequestOKResponseResponseStatus) UnmarshalBinary(b []byte) error {
	var res PullURIRequestOKResponseResponseStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
